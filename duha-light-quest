<!DOCTYPE html>
<html>
<head>
    <title>Duha's Light Quest</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #1a1a2e;
        }
        #gameCanvas {
            background: radial-gradient(circle, #e96443, #904e95);
        }
        #score {
            position: absolute;
            top: 10px;
            left: 10px;
            color: #ffffff;
            font-family: Arial, sans-serif;
            font-size: 24px;
            z-index: 1;
        }
        #gameOver {
            position: absolute;
            top: 40%;
            width: 100%;
            text-align: center;
            color: #ffffff;
            font-family: Arial, sans-serif;
            font-size: 36px;
            display: none;
            z-index: 1;
        }
        #restartButton {
            position: absolute;
            top: 50%;
            width: 100%;
            text-align: center;
            display: none;
            z-index: 1;
        }
        #restartButton button {
            padding: 10px 20px;
            font-size: 24px;
            background-color: #e96443;
            border: none;
            color: #ffffff;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div id="score">Score: 0</div>
    <div id="gameOver">Game Over</div>
    <div id="restartButton"><button onclick="restartGame()">Restart Game</button></div>
    <canvas id="gameCanvas"></canvas>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreDisplay = document.getElementById('score');
        const gameOverDisplay = document.getElementById('gameOver');
        const restartButton = document.getElementById('restartButton');

        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        let score = 0;
        let gameOver = false;

        class Duha {
            constructor() {
                this.radius = 20;
                this.x = canvas.width / 2;
                this.y = canvas.height / 2;
                this.color = '#ffff66';
                this.speed = 5;
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.fill();
                ctx.closePath();
            }

            update(tapX, tapY) {
                const dx = tapX - this.x;
                const dy = tapY - this.y;
                const distance = Math.hypot(dx, dy);

                if (distance > this.speed) {
                    this.x += (dx / distance) * this.speed;
                    this.y += (dy / distance) * this.speed;
                }
            }
        }

        class LightOrb {
            constructor() {
                this.radius = 10;
                this.x = Math.random() * canvas.width;
                this.y = Math.random() * canvas.height;
                this.color = '#ffcc00';
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.fill();
                ctx.closePath();
            }
        }

        class Shadow {
            constructor() {
                this.radius = 15;
                this.x = Math.random() * canvas.width;
                this.y = Math.random() * canvas.height;
                this.color = '#000000';
                this.speed = 2 + Math.random() * 2;
                this.angle = Math.random() * Math.PI * 2;
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.fill();
                ctx.closePath();
            }

            update() {
                this.x += Math.cos(this.angle) * this.speed;
                this.y += Math.sin(this.angle) * this.speed;

                // Bounce off walls
                if (this.x < this.radius || this.x > canvas.width - this.radius) {
                    this.angle = Math.PI - this.angle;
                }
                if (this.y < this.radius || this.y > canvas.height - this.radius) {
                    this.angle = -this.angle;
                }
            }
        }

        let duha = new Duha();
        let lightOrb = new LightOrb();
        let shadows = [];
        let tapX = duha.x;
        let tapY = duha.y;

        for (let i = 0; i < 3; i++) {
            shadows.push(new Shadow());
        }

        function animate() {
            if (gameOver) return;
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            duha.draw();
            duha.update(tapX, tapY);

            lightOrb.draw();

            // Check collision with light orb
            if (Math.hypot(duha.x - lightOrb.x, duha.y - lightOrb.y) < duha.radius + lightOrb.radius) {
                score += 1;
                scoreDisplay.textContent = `Score: ${score}`;
                lightOrb = new LightOrb();

                // Add new shadow every 5 points
                if (score % 5 === 0) {
                    shadows.push(new Shadow());
                }
            }

            // Shadows
            shadows.forEach((shadow, index) => {
                shadow.draw();
                shadow.update();

                // Check collision with Duha
                if (Math.hypot(duha.x - shadow.x, duha.y - shadow.y) < duha.radius + shadow.radius) {
                    gameOver = true;
                    gameOverDisplay.style.display = 'block';
                    restartButton.style.display = 'block';
                }
            });

            requestAnimationFrame(animate);
        }

        animate();

        canvas.addEventListener('touchstart', (e) => {
            const rect = canvas.getBoundingClientRect();
            tapX = e.touches[0].clientX - rect.left;
            tapY = e.touches[0].clientY - rect.top;
        });

        canvas.addEventListener('touchmove', (e) => {
            const rect = canvas.getBoundingClientRect();
            tapX = e.touches[0].clientX - rect.left;
            tapY = e.touches[0].clientY - rect.top;
            e.preventDefault();
        }, { passive: false });

        function restartGame() {
            score = 0;
            scoreDisplay.textContent = `Score: ${score}`;
            duha = new Duha();
            lightOrb = new LightOrb();
            shadows = [];
            for (let i = 0; i < 3; i++) {
                shadows.push(new Shadow());
            }
            gameOver = false;
            gameOverDisplay.style.display = 'none';
            restartButton.style.display = 'none';
            animate();
        }
    </script>
</body>
</html>
